openapi: 3.0.0
info:
  title: Online-Pharmacy Api Doc With Swagger
  description: xxxxxxx.
  version: 1.0.0

Contact:
  name: "Generic"
  url: "www.shopfinder.com"
  email: "kelvinstunt@gmail.com"

servers:
  - url: http://localhost:3001
    description: Default server for local development
    name: Local Development Server

components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      name: Authorization
      in: header
      description: JWT token obtained after successful login. Format: Bearer <token>

security:
  - JWTAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  /api/products:
    get:
      summary: Returns a list of products.
      tags:
        - Products
      parameters:
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Filter products with a minimum price
          required: false
          schema:
            type: number
        - name: maxPrice
          in: query
          description: Filter products with a maximum price
          required: false
          schema:
            type: number
        - name: sortBy
          in: query
          description: Sort by a specific field (e.g., price, name)
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Number of items per page for pagination
          required: false
          schema:
            type: integer

      responses:
        '200':
          description: A JSON array of product names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    category:
                      type: string
                    price:
                      type: number
                    quantity:
                      type: number
                    description:
                      type: string
  /api/products/add:
    post:
      summary: Creates a new product.
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the product
                  example: "Aspirin"
                category:
                  type: string
                  description: Category of the product
                  example: "Pharmaceuticals"
                price:
                  type: number
                  description: Price of the product
                  example: 19.99
                quantity:
                  type: number
                  description: Available stock for the product
                  example: 50
                description:
                  type: string
                  description: Brief description of the product
                  example: "Used to treat pain, fever, and inflammation."
                image:
                  type: string
                  format: binary
                  description: The product image file
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product added successfully
                  newProduct:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 61234abcd1234
                      name:
                        type: string
                        example: "Aspirin"
                      category:
                        type: string
                        example: "Pharmaceuticals"
                      price:
                        type: number
                        example: 19.99
                      quantity:
                        type: number
                        example: 50
                      description:
                        type: string
                        example: "Used to treat pain, fever, and inflammation."
                      image:
                        type: string
                        example: "/uploads/products_images/aspirin.png"
        '400':
          description: Category does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Category does not exist
        '500':
          description: Failed to add product
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to add product

  /api/products/{productId}:
    get:
      summary: Retrieve a product by ID.
      tags:
        - Products
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A product object
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  category:
                    type: string
                  price:
                    type: number
                  quantity:
                    type: number
                  description:
                    type: string
        '404':
          description: Product not found

    put:
      summary: Updates an existing product.
      tags:
        - Products
      parameters:
        - name: productId
          description: product to be updated
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                price:
                  type: number
                quantity:
                  type: number
                description:
                  type: string
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  category:
                    type: string
                  price:
                    type: number
                  quantity:
                    type: number
                  description:
                    type: string
        '404':
          description: Product not found
    delete:
      summary: Deletes a product by ID.
      tags:
        - Products
      parameters:
        - name: productId
          description: ProductId to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found

  /api/orders:
    get:
      summary: get all orders.
      tags:
        - Orders
      responses:
        '200':
          description: A JSON array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      type: string
                      description: The user who placed the order
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          product:
                            type: string
                            description: The ID of the product
                          quantity:
                            type: integer
                            description: The quantity of the product
                    totalAmount:
                      type: number
                      description: The total amount of the order
                    date:
                      type: string
                      format: date-time
                      description: The date and time when the order was created

    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  description: The user who is placing the order
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        description: The ID of the product
                      quantity:
                        type: integer
                        description: The quantity of the product
                  description: The total amount of the order
      responses:
        '201':
          description: The created order
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    description: The user who placed the order
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: string
                          description: The ID of the product
                        quantity:
                          type: integer
                          description: The quantity of the product
                  totalAmount:
                    type: number
                    description: The total amount of the order
                  date:
                    type: string
                    format: date-time
                    description: The date and time when the order was created

  /api/orders/{orderId}:
    get:
      summary: Get a specific order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested order
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    description: The user who placed the order
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: string
                          description: The ID of the product
                        quantity:
                          type: integer
                          description: The quantity of the product
                  totalAmount:
                    type: number
                    description: The total amount of the order
                  date:
                    type: string
                    format: date-time
                    description: The date and time when the order was created
        '404':
          description: Order not found

    put:
      summary: Update a specific order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          description: ID of the order to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  description: The user who is placing the order
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        description: The ID of the product
                      quantity:
                        type: integer
                        description: The quantity of the product
                totalAmount:
                  type: number
                  description: The total amount of the order
      responses:
        '200':
          description: The updated order
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    description: The user who placed the order
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: string
                          description: The ID of the product
                        quantity:
                          type: integer
                          description: The quantity of the product
                  totalAmount:
                    type: number
                    description: The total amount of the order
                  date:
                    type: string
                    format: date-time
                    description: The date and time when the order was created
        '404':
          description: Order not found

    delete:
      summary: Delete a specific order by ID
      tags:
        - Orders
      parameters:
        - in: path
          name: orderId
          description: ID of the order to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted
        '404':
          description: Order not found

  /api/users:
    get:
      summary: Get logged in user
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the user
                    email:
                      type: string
                      description: The email address of the user
                    password:
                      type: string
                      description: The password of the user
                    date:
                      type: string
                      format: date-time
                      description: The date and time when the user was created

    put:
      summary: Update user details
      tags: 
        - Users
      security:
        - bearerAuth: []
      requestBody:
        description: User details to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User updated successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      summary: Delete user account
      tags: 
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          description: userId to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User removed successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error
  
  /api/users/register:
    post:
      summary: Create a new user
      tags:
        - Users
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the user
                email:
                  type: string
                  description: The email address of the user
                password:
                  type: string
                  description: The password of the user
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The name of the user
                  email:
                    type: string
                    description: The email address of the user
                  password:
                    type: string
                    description: The password of the user
                  date:
                    type: string
                    format: date-time
                    description: The date and time when the user was created
        
        '200':
          description: User registered successfully

  /api/users/login:
    post:
      summary: Log in a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                password:
                  type: string
                  example: yourpassword
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: your_jwt_token
        '400':
          description: Invalid credentials
        '500':
          description: Server error

  /api/users/all:
    get:
      summary: Get all users
      tags: 
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/categories/upload:
    post:
      summary: Creates a new category with an image upload.
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category
                  example: "Pharmaceuticals"
                image:
                  type: string
                  format: binary
                  description: The image file for the category
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category added successfully
                  newCategory:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 61234abcd1234
                      name:
                        type: string
                        example: "Pharmaceuticals"
        '400':
          description: Category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Category already exists
        '500':
          description: Failed to add category
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to add category

  /api/categories/all_categories:
    get:
      summary: Fetches all categories.
      tags:
        - Categories
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 61234abcd1234
                    name:
                      type: string
                      example: "Pharmaceuticals"
                    image:
                      type: string
                      example: "/uploads/categories/image1.jpg"
        '500':
          description: Failed to fetch categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to fetch categories

